!function(){"use strict";var e=".content",t={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){var r=t.data,o=t.cardSelector,i=t.handleCardClick,a=t.deleteCardClick,c=t.myId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=r.name,this._image=r.link,this._likes=r.likes,this._likesNumber=r.likes.length,this._id=r._id,this._ownerId=r.owner._id,this._cardSelector=o,this._handleCardClick=i,this._deleteCardClick=a,this._api=n,this._myId=c}var t,r;return t=e,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_isLiked",value:function(){JSON.stringify(this._likes).includes(this._myId)&&(this._element.querySelector(".like-button").classList.add("like-button_active"),this._element.querySelector(".card__likes").classList.add("card__likes_active"))}},{key:"_isNotMine",value:function(){this._myId!==this._ownerId&&this._element.querySelector(".card__delete-icon").classList.add("card__delete-icon_hidden")}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._isNotMine(),this._isLiked(),this._element.querySelector(".card__image").src=this._image,this._element.querySelector(".card__image").alt=this._text,this._element.querySelector(".card__title").textContent=this._text,this._element.querySelector(".card__likes").textContent=this._likesNumber,this._element.querySelector(".card__id").textContent=this._id,this._element}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".like-button").addEventListener("click",(function(){e._likeCard()})),this._element.querySelector(".card__delete-icon").addEventListener("click",(function(){e._deleteCardClick()})),this._element.querySelector(".card__image").addEventListener("click",(function(){e._handleCardClick()}))}},{key:"_likeCard",value:function(){var e=this;this._element.querySelector(".like-button").classList.contains("like-button_active")?this._api.unlikeCard(this._id).then((function(t){e._updateLikeCounter(t),e._activateLike()})):this._api.likeCard(this._id).then((function(t){e._updateLikeCounter(t),e._activateLike()}))}},{key:"_updateLikeCounter",value:function(e){this._element.querySelector(".card__likes").textContent=e.likes.length}},{key:"_activateLike",value:function(){this._element.querySelector(".like-button").classList.toggle("like-button_active"),this._element.querySelector(".card__likes").classList.toggle("card__likes_active")}},{key:"deleteCard",value:function(){this._element.remove()}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"_showInputError",(function(e,t){var n=r._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(r._inputErrorClass),n.textContent=t,n.classList.add(r._errorClass)})),i(this,"_hideInputError",(function(e){var t=r._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(r._inputErrorClass),t.classList.remove(r._errorClass),t.textContent=""})),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=n}var t,n;return t=e,(n=[{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?t.classList.add(this._inactiveButtonClass):t.classList.remove(this._inactiveButtonClass)}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._formElement.querySelectorAll(this._inputSelector)),n=this._formElement.querySelector(this._submitButtonSelector);this._toggleButtonState(t,n),t.forEach((function(r){r.addEventListener("input",(function(){e._isValid(r),e._toggleButtonState(t,n)}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._initialArray=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.append(e)}},{key:"renderItems",value:function(){var e=this;this._initialArray.forEach((function(t){e._renderer(t)}))}}])&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._element=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._element.classList.add("popup_opened")}},{key:"close",value:function(){this._element.classList.remove("popup_opened")}},{key:"setEventListeners",value:function(){var e=this;this._element.querySelector(".popup__close").addEventListener("click",(function(){e.close()})),this._element.addEventListener("click",(function(t){t.target.closest(".popup__container")||e.close()})),this._handleEscClose()}},{key:"_handleEscClose",value:function(){var e=this;document.addEventListener("keydown",(function(t){"Escape"===t.key&&e.close()}))}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=h(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},p.apply(this,arguments)}function h(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function _(e,t){return _=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_(e,t)}function y(e,t){if(t&&("object"===f(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(o){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(n=[{key:"open",value:function(e){p(m(a.prototype),"open",this).call(this),this._card=e,this._element.querySelector(".popup__expanded-image").src=this._card.querySelector(".card__image").src,this._element.querySelector(".popup__place-name").textContent=this._card.querySelector(".card__title").textContent}}])&&d(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},S.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function C(e,t){return C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},C(e,t)}function E(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&C(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){var t,n=e.popupSelector,r=e.formSelector,o=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._formElement=document.querySelector(r),t._handleFormSubmit=o,t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._formElement.querySelectorAll(".popup__input"),this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;S(w(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){var e;S(w(a.prototype),"close",this).call(this),this._formElement.reset(),e=this._formElement,Array.from(e.querySelectorAll(".popup__input")).forEach((function(t){var n=e.querySelector(".".concat(t.id,"-error"));t.classList.remove("popup__input_type_error"),n.classList.remove("popup__error_visible"),n.textContent=""}))}}])&&k(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t){var n=t.nameSelector,r=t.aboutSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._about=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._formValues={name:this._name.textContent,about:this._about.textContent},this._formValues}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"_loadingData",value:function(e,t){document.querySelector(t).textContent=e?"Salvando...":"Salvar"}},{key:"addCard",value:function(e){return this._loadingData(!0,"#create-card"),fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)})).finally(this._loadingData(!1,"#create-card"))}},{key:"deleteCard",value:function(e){fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"likeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"unlikeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"getUserData",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"updateUserData",value:function(e){var t=e.name,n=e.about;this._loadingData(!0,"#edit-profile_save"),fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)})).finally(this._loadingData(!1,"#edit-profile_save"))}},{key:"updateUserImage",value:function(e){this._loadingData(!0,"#edit-avatar_save"),fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)})).finally(this._loadingData(!1,"#edit-avatar_save"))}}])&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())({baseUrl:"https://around.nomoreparties.co/v1/web_ptbr_cohort_01",headers:{authorization:"0c70245d-208a-4884-9ebb-077526421f9a","Content-Type":"application/json"}});function I(){return new L({nameSelector:".header__title",aboutSelector:".header__subtitle"})}q.getUserData().then((function(e){I().setUserInfo(e),document.querySelector(".header__id").textContent=e._id,document.querySelector(".header__avatar").src=e.avatar}));var x=new j({popupSelector:"#edit-avatar_popup",formSelector:"#editAvatarForm",handleFormSubmit:function(e){q.updateUserImage(e.avatar),document.querySelector(".header__avatar").src=e.avatar}});x.setEventListeners(),document.querySelector(".avatar-button").addEventListener("click",(function(){x.open()}));var U=new j({popupSelector:"#edit-profile_popup",formSelector:"#editProfileForm",handleFormSubmit:function(e){I().setUserInfo(e),q.updateUserData(e)}});U.setEventListeners(),document.querySelector(".edit-button").addEventListener("click",(function(){U.open();var e=I().getUserInfo();document.querySelector("#input-name").value=e.name,document.querySelector("#input-about").value=e.about})),q.getInitialCards().then((function(t){var n=new u({items:t,renderer:function(e){var t=V(e);n.addItem(t)}},e);n.renderItems()}));var T=new j({popupSelector:"#add-card_popup",formSelector:"#addCardForm",handleFormSubmit:function(t){q.addCard(t).then((function(t){var n=V(t);document.querySelector(e).prepend(n)}))}});T.setEventListeners(),document.querySelector(".add-button").addEventListener("click",(function(){T.open()}));var D=new a(t,document.forms.addCardForm),R=new a(t,document.forms.editProfileForm),B=new a(t,document.forms.editAvatarForm);function V(e){var t=new r({data:e,cardSelector:"#cards__template",handleCardClick:function(){var e=new v(".popup_image");e.setEventListeners(),e.open(n)},deleteCardClick:function(){var e=new l("#delete-card_popup");e.setEventListeners(),e.open(),document.querySelector("#delete-card").addEventListener("click",(function(){t.deleteCard(),e.close(),q.deleteCard(n.querySelector(".card__id").textContent)}))},myId:document.querySelector(".header__id").textContent},q),n=t.generateCard();return n}D.enableValidation(),R.enableValidation(),B.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,