!function(){"use strict";var e=".content",t={inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function r(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var n=function(){function e(t,r){var n=t.data,o=t.cardSelector,i=t.handleCardClick,a=t.deleteCardClick,c=t.myId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._text=n.name,this._image=n.link,this._likes=n.likes,this._likesNumber=n.likes.length,this._id=n._id,this._ownerId=n.owner._id,this._cardSelector=o,this._handleCardClick=i,this._deleteCardClick=a,this._api=r,this._myId=c}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_isLiked",value:function(){JSON.stringify(this._likes).includes(this._myId)&&(this._element.querySelector(".like-button").classList.add("like-button_active"),this._element.querySelector(".card__likes").classList.add("card__likes_active"))}},{key:"_isNotMine",value:function(){this._myId!==this._ownerId&&this._element.querySelector(".card__delete-icon").classList.add("card__delete-icon_hidden")}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._isNotMine(),this._isLiked(),this._element.querySelector(".card__image").src=this._image,this._element.querySelector(".card__image").alt=this._text,this._element.querySelector(".card__title").textContent=this._text,this._element.querySelector(".card__likes").textContent=this._likesNumber,this._element.querySelector(".card__id").textContent=this._id,this._element}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".like-button").addEventListener("click",(function(){e._likeCard()})),this._element.querySelector(".card__delete-icon").addEventListener("click",(function(){e._deleteCardClick()})),this._element.querySelector(".card__image").addEventListener("click",(function(){e._handleCardClick()}))}},{key:"_likeCard",value:function(){var e=this;this._element.querySelector(".like-button").classList.contains("like-button_active")?this._api.unlikeCard(this._id).then((function(t){e._updateLikeCounter(t),e._activateLike()})):this._api.likeCard(this._id).then((function(t){e._updateLikeCounter(t),e._activateLike()}))}},{key:"_updateLikeCounter",value:function(e){this._element.querySelector(".card__likes").textContent=e.likes.length}},{key:"_activateLike",value:function(){this._element.querySelector(".like-button").classList.toggle("like-button_active"),this._element.querySelector(".card__likes").classList.toggle("card__likes_active")}},{key:"removeCard",value:function(){this._element.remove()}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var a=function(){function e(t,r){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"_showInputError",(function(e,t){var r=n._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(n._inputErrorClass),r.textContent=t,r.classList.add(n._errorClass)})),i(this,"_hideInputError",(function(e){var t=n._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(n._inputErrorClass),t.classList.remove(n._errorClass),t.textContent=""})),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=r}var t,r;return t=e,(r=[{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(e,t){this._hasInvalidInput(e)?(t.disabled=!0,t.classList.add(this._inactiveButtonClass)):(t.disabled=!1,t.classList.remove(this._inactiveButtonClass))}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_setEventListeners",value:function(){var e=this,t=Array.from(this._formElement.querySelectorAll(this._inputSelector)),r=this._formElement.querySelector(this._submitButtonSelector);this._toggleButtonState(t,r),t.forEach((function(n){n.addEventListener("input",(function(){e._isValid(n),e._toggleButtonState(t,r)}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&o(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t,r){var n=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._initialArray=n,this._renderer=o,this._container=document.querySelector(r)}var t,r;return t=e,(r=[{key:"addItem",value:function(e){this._container.append(e)}},{key:"prependItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(){var e=this;this._initialArray.forEach((function(t){e._renderer(t)}))}}])&&c(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._element=document.querySelector(t)}var t,r;return t=e,(r=[{key:"open",value:function(){var e=this;this._element.classList.add("popup_opened"),document.addEventListener("keydown",(function(t){return e._handleEscClose(t)}))}},{key:"close",value:function(){var e=this;this._element.classList.remove("popup_opened"),document.removeEventListener("keydown",(function(t){return e._handleEscClose(t)}))}},{key:"setEventListeners",value:function(){var e=this;this._element.querySelector(".popup__close").addEventListener("click",(function(){e.close()})),this._element.addEventListener("click",(function(t){t.target.closest(".popup__container")||e.close()}))}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}}])&&u(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(){return p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=_(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},p.apply(this,arguments)}function _(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=v(e)););return e}function h(e,t){return h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},h(e,t)}function y(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}var m=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&h(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=v(n);if(o){var r=v(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return y(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(r=[{key:"open",value:function(e){p(v(a.prototype),"open",this).call(this),this._card=e,this._element.querySelector(".popup__expanded-image").src=this._card.querySelector(".card__image").src,this._element.querySelector(".popup__expanded-image").alt=this._card.querySelector(".card__title").textContent,this._element.querySelector(".popup__place-name").textContent=this._card.querySelector(".card__title").textContent}}])&&f(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function k(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var n=g(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},S.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function C(e,t){return C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},C(e,t)}function E(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&C(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(n);if(o){var r=w(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return E(this,e)});function a(e){var t,r=e.popupSelector,n=e.formSelector,o=e.handleFormSubmit,c=e.resetValidation;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,r))._formElement=document.querySelector(n),t._handleFormSubmit=o,t._resetValidation=c,t}return t=a,(r=[{key:"_getInputValues",value:function(){var e=this;return this._inputList=this._formElement.querySelectorAll(".popup__input"),this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;S(w(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){S(w(a.prototype),"close",this).call(this),this._formElement.reset(),this._resetValidation(this._formElement)}}])&&k(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),a}(l);function j(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var O=function(){function e(t){var r=t.nameSelector,n=t.aboutSelector,o=t.avatarSelector,i=t.idSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(r),this._about=document.querySelector(n),this._avatar=document.querySelector(o),this._id=document.querySelector(i)}var t,r;return t=e,(r=[{key:"getUserInfo",value:function(){return this._formValues={name:this._name.textContent,about:this._about.textContent},this._formValues}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about,this._avatar.src=e.avatar,this._id.textContent=e._id}},{key:"updateUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about}}])&&j(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function q(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var P=new(function(){function e(t){var r=t.baseUrl,n=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=r,this._headers=n}var t,r;return t=e,(r=[{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"_loadingData",value:function(e,t){document.querySelector(t).textContent=e?"Salvando...":"Salvar"}},{key:"addCard",value:function(e){return this._loadingData(!0,"#create-card"),fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)})).finally(this._loadingData(!1,"#create-card"))}},{key:"deleteCard",value:function(e){fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"likeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"unlikeCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"getUserData",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"updateUserData",value:function(e){var t=e.name,r=e.about;this._loadingData(!0,"#edit-profile_save"),fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)})).finally(this._loadingData(!1,"#edit-profile_save"))}},{key:"updateUserImage",value:function(e){return this._loadingData(!0,"#edit-avatar_save"),fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)})).finally(this._loadingData(!1,"#edit-avatar_save"))}}])&&q(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}())({baseUrl:"https://around.nomoreparties.co/v1/web_ptbr_cohort_01",headers:{authorization:"0c70245d-208a-4884-9ebb-077526421f9a","Content-Type":"application/json"}}),I=new O({nameSelector:".header__title",aboutSelector:".header__subtitle",avatarSelector:".header__avatar",idSelector:".header__id"});P.getUserData().then((function(e){I.setUserInfo(e)})).then((function(){P.getInitialCards().then((function(t){var r=new s({items:t,renderer:function(e){var t=B(e);r.addItem(t)}},e);r.renderItems()}))}));var x=new L({popupSelector:"#edit-avatar_popup",formSelector:"#editAvatarForm",handleFormSubmit:function(e){P.updateUserImage(e.avatar).then((function(e){document.querySelector(".header__avatar").src=e.avatar}))},resetValidation:function(e){var t=e.querySelector("#edit-avatar_save");Array.from(e.querySelectorAll(".popup__input")).forEach((function(r){var n=e.querySelector(".".concat(r.id,"-error"));r.classList.remove("popup__input_type_error"),n.classList.remove("popup__error_visible"),n.textContent="",t.disabled=!0,t.classList.add("popup__button_disabled")}))}});x.setEventListeners(),document.querySelector(".avatar-button").addEventListener("click",(function(){x.open()}));var U=new L({popupSelector:"#edit-profile_popup",formSelector:"#editProfileForm",handleFormSubmit:function(e){I.updateUserInfo(e),P.updateUserData(e)},resetValidation:function(e){var t=e.querySelector("#edit-profile_save");Array.from(e.querySelectorAll(".popup__input")).forEach((function(r){var n=e.querySelector(".".concat(r.id,"-error"));r.classList.remove("popup__input_type_error"),n.classList.remove("popup__error_visible"),n.textContent="",t.disabled=!0,t.classList.add("popup__button_disabled")}))}});U.setEventListeners(),document.querySelector(".edit-button").addEventListener("click",(function(){U.open();var e=I.getUserInfo();document.querySelector("#input-name").value=e.name,document.querySelector("#input-about").value=e.about}));var T=new L({popupSelector:"#add-card_popup",formSelector:"#addCardForm",handleFormSubmit:function(t){P.addCard(t).then((function(t){var r=[];r.push(t);var n=new s({items:r,renderer:function(e){var t=B(e);n.prependItem(t)}},e);n.renderItems()}))},resetValidation:function(e){var t=e.querySelector("#create-card");Array.from(e.querySelectorAll(".popup__input")).forEach((function(r){var n=e.querySelector(".".concat(r.id,"-error"));r.classList.remove("popup__input_type_error"),n.classList.remove("popup__error_visible"),n.textContent="",t.disabled=!0,t.classList.add("popup__button_disabled")}))}});T.setEventListeners(),document.querySelector(".add-button").addEventListener("click",(function(){T.open()}));var D=new a(t,document.forms.addCardForm),V=new a(t,document.forms.editProfileForm),R=new a(t,document.forms.editAvatarForm);function B(e){var t=new n({data:e,cardSelector:"#cards__template",handleCardClick:function(){var e=new m(".popup_image");e.setEventListeners(),e.open(r)},deleteCardClick:function(){var e=new l("#delete-card_popup");e.setEventListeners(),e.open();var n=document.querySelector("#delete-card");n.addEventListener("click",(function(){P.deleteCard(r.querySelector(".card__id").textContent),n.replaceWith(n.cloneNode(!0)),t.removeCard(),e.close()}))},myId:document.querySelector(".header__id").textContent},P),r=t.generateCard();return r}D.enableValidation(),V.enableValidation(),R.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,